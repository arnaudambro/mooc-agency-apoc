@for $i from 0 through 40 {

  .grid-row-start-#{$i} {
    -ms-grid-row: #{$i};
    grid-row-start: #{$i};
  }

  $adjustedToGap: #{$i * 2 - 1};

  .grid-row-start-#{$i}-gridgap {
    -ms-grid-row: $adjustedToGap;
    grid-row-start: #{$i};
  }

  .grid-column-start-#{$i} {
    -ms-grid-column: #{$i};
    grid-column-start: #{$i};
  }

  .grid-column-start-#{$i}-gridgap {
    -ms-grid-column: $adjustedToGap;
    grid-column-start: #{$i};
  }

  @for $j from 0 through 40 {

    .grid-row-start-#{$i}-end-#{$j} {
      -ms-grid-row: #{$i};
      -ms-grid-row-span: #{$j - $i};
      grid-row-start: #{$i};
      grid-row-end: #{$j};
    }

    .grid-row-start-#{$i}-end-#{$j}-gridgap {
      -ms-grid-row: #{$i};
      -ms-grid-row-span: (#{($j * 2 - 1) - ($i * 2 - 1))});
      grid-row-start: #{$i};
      grid-row-end: #{$j};
    }

    .grid-column-start-#{$i}-end-#{$j} {
      -ms-grid-column: #{$i};
      -ms-grid-column-span: #{$j} - #{$i};
      grid-column-start: #{$i};
      grid-column-end: #{$j};
    }

    .grid-column-start-#{$i}-end-#{$j}-gridgap {
      -ms-grid-column: #{$i};
      -ms-grid-column-span: (#{($j * 2 - 1) - ($i * 2 - 1))});
      grid-column-start: #{$i};
      grid-column-end: #{$j};
    }
  }
}

@function repeat($number, $value) {
  $valueExtended: ();

  @for $i from 1 through $number {
    $valueExtended: append($valueExtended, $value);
  }

  @return $valueExtended;
}

@function appendGapToGridTemplate($gridTemplate, $gridGap) {
  $newGridTemplate: ();

  $columnsNumber: length($gridTemplate);

  @for $i from 1 through $columnsNumber {
    @if ($i == $columnsNumber) {
      $newGridTemplate: append($newGridTemplate, nth($gridTemplate, $i));
    } @else {
      $newGridTemplate: append($newGridTemplate, nth($gridTemplate, $i) $gridGap);
    }
  }

  @return $newGridTemplate;
}

@mixin gridTemplateColumns($gridTemplateColumns, $gridColumnGap: 0) {

  @if ($gridColumnGap != 0) {
    -ms-grid-columns: appendGapToGridTemplate($gridTemplateColumns, $gridColumnGap);
    grid-column-gap: $gridColumnGap;
  } @else {
    -ms-grid-columns: $gridTemplateColumns;
  }
  grid-template-columns: $gridTemplateColumns;
}

@mixin gridTemplateRows($gridTemplateRows, $gridRowGap: 0) {
  @if ($gridRowGap != 0) {
    -ms-grid-rows: appendGapToGridTemplate($gridTemplateRows, $gridRowGap);
    grid-row-gap: $gridRowGap;
  } @else {
    -ms-grid-rows: $gridTemplateRows;
  }
  grid-template-rows: $gridTemplateRows;
}

%displayGrid {
  display: -ms-grid;
  display: grid;
}

@mixin gridColumn($start, $end: 0) {
  -ms-grid-column: $start;
  grid-column-start: $start;
  @if ($end != 0) {
    -ms-grid-column-span: $end - $start;
    grid-column-end: $end;    
  }
}

@mixin gridRow($start, $end: 0) {
  -ms-grid-row: $start;
  grid-row-start: $start;
  @if ($end != 0) {
    -ms-grid-row-span: $end - $start;
    grid-row-end: $end;    
  }
}

@mixin justifySelf($value) {
  -ms-grid-column-align: $value;
  justify-self: $value;
}

@mixin alignSelf($value) {
  -ms-grid-row-align: $value;
  align-self: $value;
}

@for $i from 1 through 40 {
  .grid-template-columns-upanddown-#{$i} {

    @include gridTemplateColumns(repeat($i, 1fr 5px))
  }
}
